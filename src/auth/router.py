from fastapi import APIRouter, HTTPException, Response, Depends
from authx import AuthX, AuthXConfig, RequestToken

from .chems import UserLoginShema

router = APIRouter(prefix="/auth",
                   tags=["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üî©"])

config = AuthXConfig()
config.JWT_SECRET_KEY = "SECRET_KEY"
config.JWT_ACCESS_COOKIE_NAME = "my_access_token"
config.JWT_TOKEN_LOCATION = ["cookies"]

security = AuthX(config=config)

#–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è 
@router.post("/login", summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def login(creds: UserLoginShema, response: Response):
    if creds.username == "test" and creds.password == "test":
        token = security.create_access_token(uid = "12") #—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞, —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º id 
        response.set_cookie(config.JWT_ACCESS_COOKIE_NAME, token) #–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É–∫–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        return {"access_token": token}
    raise HTTPException(status_code=401, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω—ç–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@router.get("/protected", dependencies = [Depends(security.access_token_required)], summary = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å") #–∫–ª–∞—Å—Å Depends —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Ç—å, —Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞, –µ–Ω–¥ –ø–æ–∏–Ω—Ç –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
def protected():
    return {"comment": "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"}